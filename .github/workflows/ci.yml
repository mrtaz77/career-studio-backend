name: Backend CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
    types: [ opened, synchronize, reopened ]

permissions:
  contents: read
  id-token: write     # for SonarQube OIDC auth

jobs:
  build-and-test:
    name: Lint, Test & Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11.x'

      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '2.1.3'

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Create .env
        run: |
          touch .env
          echo "ENVIRONMENT=${{ secrets.ENVIRONMENT }}" >> .env
          echo "HOST=${{ secrets.HOST }}" >> .env
          echo "PORT=${{ secrets.PORT }}" >> .env
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env
          echo "SUPABASE_DB_URL=${{ secrets.SUPABASE_DB_URL }}" >> .env
          echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> .env
          echo "SUPABASE_PROJECT_URL=${{ secrets.SUPABASE_PROJECT_URL }}" >> .env
          echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
          echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
          echo "USER_1_EMAIL=${{ secrets.USER_1_EMAIL }}" >> .env
          echo "USER_1_PASSWORD=${{ secrets.USER_1_PASSWORD }}" >> .env
          echo "FIREBASE_API_KEY=${{ secrets.FIREBASE_API_KEY }}" >> .env
          echo "GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}" >> .env
          echo "GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}" >> .env
          mkdir secrets
          cd secrets
          echo ${{ secrets.FIREBASE_ADMIN_SDK }} | base64 --decode >> firebase-adminsdk.json

      - name: Run Prisma Generate
        run: poetry run prisma generate

      - name: Black check
        run: poetry run black --check .

      - name: isort check
        run: poetry run isort . --check-only

      - name: Ruff lint
        run: poetry run ruff check .

      - name: MyPy type-check
        run: |
          poetry add --dev types-requests
          poetry run mypy src

      - name: Pytest with coverage
        run: |
          poetry run pytest --cov=src --cov-branch \
            --cov-report=term-missing --cov-report=xml

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
