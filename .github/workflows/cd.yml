name: Backend CD

on:
  push:
    branches: [ main ]

permissions:
  id-token: write   # allows azure/login to use OIDC
  contents: read

jobs:
  deploy:
    name: Deploy to Azure VM
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # 1) Azure login using OIDC
      - name: Login to Azure
        uses: azure/login@v1
        with:
          client-id:     ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id:     ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # 2) ACR login
      - name: Login to ACR
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      # 3) Build & push Docker image
      - name: Build & push image
        run: |
          IMAGE=${{ secrets.ACR_LOGIN_SERVER }}/backend:${{ github.sha }}
          docker build -t $IMAGE .
          docker push $IMAGE
      
      # 4) SSH & deploy
      - name: SSH & update deployment
        uses: appleboy/ssh-action@v0.1.6
        with:
          host:    ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key:     ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            if [ ! -d "backend" ]; then
              mkdir backend
              cd backend
              git init
              git remote add origin https://github.com/mrtaz77/career-studio-backend.git
            else
              cd backend
            fi

            # Pull the latest changes from the repository
            git fetch origin
            git reset --hard origin/main

            cat >.env <<EOF
            ENVIRONMENT=production
            PORT=${{ secrets.PORT }}
            HOST=${{ secrets.HOST }}
            SUPABASE_DB_URL=${{ secrets.SUPABASE_DB_URL }}
            SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
            SUPABASE_PROJECT_URL=${{ secrets.SUPABASE_PROJECT_URL }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            REDIS_HOST=${{ secrets.REDIS_HOST }}
            REDIS_PORT=${{ secrets.REDIS_PORT }}
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            EOF
            chmod 600 .env

            # Ensure secrets directory exists and populate it with secret files
            if [ -d "secrets" ]; then
              rm -rf secrets/*
            else
              mkdir -p secrets
            fi
            echo ${{ secrets.FIREBASE_ADMIN_SDK }} | base64 --decode > secrets/firebase-adminsdk.json

            docker compose pull backend
            docker compose up -d backend

            # Prune unused images
            docker image prune -f
