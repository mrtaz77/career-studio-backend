generator client {
  provider = "prisma-client-py"
  output   = "../src/prisma_client"
  recursive_type_depth = 5
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid         String   @id @db.Text
  username    String   @unique
  full_name   String
  email       String   @unique
  address     String
  phone       String
  created_at  DateTime @db.Timestamp(6)
  updated_at  DateTime @db.Timestamp(6)

  cvs         CV[]
}

model CV {
  id                      Int              @id @default(autoincrement())
  user_id                 String           @db.Text
  type                    String
  bookmark                Boolean          @default(false)
  is_draft                Boolean          @default(true)
  pdf_url                 String?
  preview_url             String?
  latest_saved_version_id Int?
  created_at              DateTime         @db.Timestamp(6)
  updated_at              DateTime         @db.Timestamp(6)

  user                    User             @relation(fields: [user_id], references: [uid])
  education               Education[]
  experience              Experience[]
  certifications          Certification[]
  publications            Publication[]
  projects                Project[]
  technical_skills        TechnicalSkill[]
  latest_version          CVVersion?       @relation(name: "LatestVersion", fields: [latest_saved_version_id], references: [id])
  versions                CVVersion[]      @relation(name: "AllVersions")
}

model CVVersion {
  id             Int       @id @default(autoincrement())
  cv_id          Int
  version_number Int
  pdf_url        String
  preview_url    String
  created_at     DateTime  @db.Timestamp(6)

  cv             CV        @relation(name: "AllVersions", fields: [cv_id], references: [id], map: "fk_cvversion_allversions")
  referenced_by  CV[]      @relation(name: "LatestVersion")
}

model Education {
  id           Int      @id @default(autoincrement())
  cv_id        Int
  degree       String
  institution  String
  location     String
  start_date   DateTime @db.Date
  end_date     DateTime @db.Date
  gpa          Float
  honors       String

  cv           CV       @relation(fields: [cv_id], references: [id])
}

model Experience {
  id              Int      @id @default(autoincrement())
  cv_id           Int
  job_title       String
  position        String
  company         String
  company_url     String
  company_logo    String
  location        String
  employment_type String
  location_type   String
  industry        String
  start_date      DateTime @db.Date
  end_date        DateTime @db.Date
  description     String

  cv              CV       @relation(fields: [cv_id], references: [id])
}

model Certification {
  id           Int      @id @default(autoincrement())
  cv_id        Int
  title        String
  issuer       String
  issued_date  DateTime @db.Date
  link         String

  cv           CV       @relation(fields: [cv_id], references: [id])
}

model Publication {
  id       Int           @id @default(autoincrement())
  cv_id    Int
  title    String
  journal  String
  year     Int
  link     String

  cv       CV            @relation(fields: [cv_id], references: [id])
  urls     ResourceURL[] @relation(name: "PublicationURLs")
}

model Project {
  id           Int                 @id @default(autoincrement())
  cv_id        Int
  name         String
  description  String

  cv           CV                  @relation(fields: [cv_id], references: [id])
  technologies ProjectTechnology[]
  urls         ResourceURL[]       @relation(name: "ProjectURLs")
}

model ResourceURL {
  id          Int          @id @default(autoincrement())
  source_id   Int
  source_type String
  label       String
  url         String

  project     Project?     @relation("ProjectURLs", fields: [source_id], references: [id], map: "fk_resourceurl_projecturls")
  publication Publication? @relation("PublicationURLs", fields: [source_id], references: [id], map: "fk_resourceurl_publicationurls")
}

model ProjectTechnology {
  id          Int     @id @default(autoincrement())
  project_id  Int
  technology  String

  project     Project @relation(fields: [project_id], references: [id])
}

model TechnicalSkill {
  id       Int     @id @default(autoincrement())
  cv_id    Int
  category String
  name     String

  cv       CV      @relation(fields: [cv_id], references: [id])
}
